<?php
/**
 * @file
 * Lacuna Stories module file. Displays a number of visualizations of
 * user data. Currently includes maps, journeys.
 *
 * Ben Allen <benallen@stanford.edu>
 * Mike Widner <mikewidner@stanford.edu>
 *
 */

// to install maps:
// 1. this one's simple. use drush to enable the module, make sure
// that d3.js is in /sites/all/libraries/d3, and it should work. by
// default it is displayed in /maps_view

// to install journeys:
// 0. install maps
// 1. import the view used to feed the visualization. save the output
// of this view to /misc/journeys.json
// 2. set up a cron job (I don't know how to do this) to get output
// from the view on a regular basis.

// to add a new visualization:
// 1. create directory for js in ./libraries. directory names must
// start with "d3."
// 2. create .info file in that directory. (see d3.maps for example).
// custom css / custom .tpl.php can be specified in files in the
// library's directory. (I believe; haven't tested yet)
// 3. add name of directory to the array below.
// 4. add an entry in lacuna_visualizations_menu
// 5. create callback function (lacuna_visualizations_responses is an
// example here) that uses EntityFieldQuery to pull in data and call
// graphapi functions (or just d3_draw).
// 6. remember to set the library name in $options.
// 7. wrap the javascript as described in the README.txt for the d3
// module (or just copy one of the extant modules, but remember to
// change the name of the function to match the name of the library
// directory (i.e. don't have journeys.js start with:

// (function($) {
// Drupal.d3.maps = function (select, settings) {

// (yes, this is a mistake I've made, and d3 will fail silently if you
// make this mistake.)

// 8. rejoice, for you you now have a new visualization.
//
// NOTE: remember to download d3.js and put it in
// /sites/all/libraries/d3, else the d3 module will, once again,  fail
// silently.  (also a mistake I've made... )

// helper callback to return all visualization libraries.
function lacuna_visualizations_default_libraries() {
	return array(
		'd3.maps',
		'd3.journeys',
    'd3.annotations_dashboard',
		);
}


/**
 * Implements hook_libraries_info_file_paths().
 */
function lacuna_visualizations_libraries_info_file_paths() {

  // Get all library directories.
  $libraries = libraries_get_libraries();

  $paths = array();
  // Output an array of paths to check for.
  foreach ($libraries as $path) {
    $paths[] = $path;
  }

  // Load the directory where the d3 example libraries are.
  $library_path = drupal_get_path('module', 'lacuna_visualizations') . '/libraries/';
  // Add these to the search directories for libraries.
  foreach (lacuna_visualizations_default_libraries() as $library) {
    $paths[] = $library_path . $library;
  }

  return $paths;
}


/**
 * Provides an array of d3 libraries.
 *
 * D3 libraries are going to have a prefix of d3., see README.txt
 * for information on creating a custom d3 library.
 */
function lacuna_visualizations_get_libraries() {

  static $d3_libraries;

  // Returns all libraries in the default folders.
  $libraries = libraries_info();

  foreach ($libraries as $library) {
    $library_name = $library['machine name'];
    // Filter out any other non-d3 library. All d3 libraries should have
    // the prefix "d3.".
    if (strpos($library_name, 'd3.') === FALSE) {
      continue;
    }
    // Do not list these default extension libraries.
    if (in_array($library_name, array('d3.extend', 'd3.tooltip', 'd3.drupal'))) {
      continue;
    }

    $d3_libraries[$library_name] = $library;
    $d3_libraries[$library_name]['js callback'] = str_replace('d3.', '', $library_name);
  }

  return $d3_libraries;
}



/**
 * Implements hook_libraries_info_alter().
 */
function lacuna_visualizations_libraries_info_alter(&$libraries) {
  // Automatically add in the d3.drupal dependency so that each
  // d3.library doesn't have to.
  foreach (lacuna_visualizations_get_libraries() as $library_name => $library) {
    $libraries[$library_name]['dependencies'][] = 'd3.drupal';
  }
  // By default, the libraries module only checks the libraries folders.
  // We need to add this module's libraries path to the library info.
  $path = drupal_get_path('module', 'lacuna_visualizations') . '/libraries/';
  foreach (lacuna_visualizations_default_libraries() as $library_name) {
    // Change library path to path/to/module/d3/libraries
    $libraries[$library_name]['library path'] = $path . $library_name;
  }
}


/**
 * Implements hook_theme().
 */

function lacuna_visualizations_theme() {
  // template can be changed in the .info file for a library.
  $themes['d3']['template'] = 'lacuna_visualizations';
  return $themes;
}



/**
 * Implements hook_menu().
 */
function lacuna_visualizations_menu() {
	return array(
    'visualization/responses' => array(
  	  'title' => 'Responses Map',
  	  'description' => 'Visualization showing links between responses and primary sources',
  	  'access arguments' => array('create response content'),
  	  'page callback' => 'lacuna_visualizations_responses',
  	  'type' => MENU_NORMAL_ITEM,
      'file' => 'lacuna_visualizations.responses.inc',
    ),
    'visualization/dashboard' => array(
      'title' => 'Annotations Dashboard',
      'description' => 'Visualization showing all annotations',
      'access arguments' => array('create annotations'),
      'page callback' => 'lacuna_visualizations_annotation_dashboard',
      'type' => MENU_NORMAL_ITEM,
      'file' => 'lacuna_visualizations.dashboard.inc',
    ),
    'visualization/dashboard/data.json' => array(
      'title' => 'Data for Annotations Dashboard',
      'description' => 'The json-formatted data for the Annotations Dashboard',
      'access arguments' => array('create annotations'),
      'page callback' => 'lacuna_visualizations_annotation_dashboard_data',
      'type' => MENU_CALLBACK,
      'file' => 'lacuna_visualizations.dashboard.inc',
    ),
    'admin/config/system/visualizations' => array(
      'title' => 'Dashboard Cache',
      'description' => 'Modify cache settings for the Annotations Dashboard',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('lacuna_visualizations_admin_form'),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'lacuna_visualizations.admin.inc',
    ),
  );
}


function lacuna_visualizations_admin_form() {
  $form = array();

  $form['lacuna_visualizations_cache_threshold'] = array(
    '#type' => 'textfield',
    '#title' => t('Cache threshold'),
    '#description' => t('Set the minimum number of annotations in a course before the dashboard is cached.'),
    '#default_value' => variable_get('lacuna_visualizations_cache_threshold', 1000),
    '#required' => TRUE,
  );

  $form['lacuna_visualizations_cache_ttl'] = array(
    '#type' => 'textfield',
    '#title' => t('Cache duration'),
    '#description' => t('Set the time in hours after which the cache should expire.'),
    '#default_value' => variable_get('lacuna_visualizations_cache_ttl', 24),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Visualization showing links between student responses and primary
 * sources. (version I'm currently working on).
 */
function lacuna_visualizations_journeyview() {

  // BJA uses EntityFieldQuery to pull all the 'response' and 'document' nodes
  // BJA in the future, this should read from a view(?) rather than being
  // BJA hard-coded here.
  $responseQuery = new EntityFieldQuery();
    $responseQuery
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', array('biblio', 'response'));
  $result = $responseQuery->execute();
  $nids = array_keys($result['node']);
  $nodes = node_load_multiple($nids);

  $graph = graphapi_new_graph();
  foreach ($nodes as $item) {
  	$usersQuery = new EntityFieldQuery();
  	$usersQuery->entityCondition('entity_type', 'user');
  	$usersResult = $usersQuery->execute();
  	$uids = array_keys($usersResult['user']);
  	$users = user_load_multiple($uids);

  	 // this array will eventually contain all relevant info about responses and document: author, timestamp, etc.
  	 // added to nodes before graphapi passes off to d3.
    $dataArray = array(
      'itemType' => $item->type,
  		// author set below -- $item->name for responses, but
  		// more complicated for biblio entries.
  		'author'	=> ' ',
      'title'     => $item->title,
      'linksTitles'     => array(),
      'thisURL'   => $GLOBALS['base_url'] . "/node/" . $item->nid,
      'linksURL' => array(),
  		'biblio' => array(),
  		'document_abstract' => '',
  		'date' => $item->created,
    );

  		// added to all links before graphapi passes off to d3.
  		// Currently only contains a date (the time that the source
  		// node was created; currently assuming that all links are
  		// created at the same time as the response they're
  		// associated with.
    if (!$dataArray['author']) {
      $dataArray['author'] = "None";
    }

    $title = $item->title;

  		/* pull out data needed for biblio nodes and add it to
  		 * $dataArray */
  	if ($item->type == "biblio") {
  		$document_abstract = strip_tags($item->field_biblio_hover_abstract);
  		$dataArray['document_abstract'] = $document_abstract;
  		$author = ' ';    // inits $author outside loop (ih)
  		if (isset($item->biblio_contributors[0])) {
  			$count = count($item->biblio_contributors);
  			for ($i = 0; $i < $count; $i++) {
  				$author = $item->biblio_contributors[0]['name'];
  				$dataArray['author'] .= $author . "\r\n";
  			}
  		}
  	}
    if ($item->type == "response") {

  		$dataArray['author'] = $users[$item->uid]->field_display_name->und[0].safe_value;

  		// draw links based off of node's field_bibliographic_entry.
      if ($item->field_bibliographic_entry) {
        $linkArray = $item->field_bibliographic_entry;
        for ($i = 0; $i < count($linkArray[LANGUAGE_NONE]); $i++) {
          $linkedNid = $linkArray[LANGUAGE_NONE][$i]['target_id'];
          if (array_key_exists($linkedNid, $nodes)) {
            graphapi_add_link($graph, $title, $nodes[$linkedNid]->title);
            array_push($dataArray['linksTitles'], $nodes[$linkedNid]->title);
            array_push($dataArray['linksURL'], $GLOBALS['base_url'] . '/node/' . $linkedNid);
  //			graphapi_set_link_data($graph, $title,	$nodes[$linkedNid]['title'], $item->created);
          }
        }
      } // end if($item->field_bibliographic_entry)

/*			if($item->field_bibliographic_entry){
				print_r($item->field_bibliographic_entry);
			//	echo "<br />";
              for($i = 0; $i < count($item->field_bibliographic_entry[LANGUAGE_NONE]); $i++) {

				  // so this is the nid of the bibliographic reference.
				  // print_r($item->field_bibliographic_entry[LANGUAGE_NONE][$i]['target_id']);
				  $bibnid = $item->field_bibliographic_entry[LANGUAGE_NONE][$i]['target_id'];
				  // echo "<br />";
				  // print_r($bibnid);
				  if(array_key_exists($bibnid, $nodes))
					  // RESTART HERE
					  // This is the title of the bibliographic
					  // reference, which (should be) the same as the
					  // title of the node that we're actually linking
					  // to.

					  // wait.
					  // we should link to the bibliographic reference
					  // rather than to the actual document. duh.
					  print_r($nodes[$bibnid]);
					  echo "<br />";
				  }
			  } */
        }	// end if($item->type == "response")
        graphapi_set_node_data($graph, $title, $dataArray);
    }

	// settings.config
  $options = array(
    'width' => 600,
    'height' => 500,
    'item-width' => 45,
    'engine' => 'd3',
  	'library' => 'journeys',
  	'testString' => "TEST STRING",
  	'userList' => $users,
  	'drawDocumentCircle' => true,
  );
  return theme('graphapi_dispatch', array('graph' => $graph, 'config' => $options));
}  // end function lacuna_visualizations_journeyview()

//function get_document_id_for_biblio($nid) {
//  //Find appropriate material for that biblio entry.
//  $docQuery = new EntityFieldQuery();
//  $docQuery
//    ->entityCondition('entity_type', 'node')
//    ->entityCondition('bundle', 'document')
//    ->fieldCondition('field_bibliographic_entry', 'target_id', $nid, '=');
//  $docResult = $docQuery->execute();
//  if (count($docResult['node'])>0){
//    $results = array_keys($docResult['node']);
//    // PHP 5.3 won't dereference arrays from functions directly
//    return $results[0];
//  }
//  else {
//    return null;
//  }
//}

function get_link_url($docId, $nid, $docType) {
	global $base_url;
	$url = $base_url . '/';
  /* if (!empty($docId)){
    return $url . drupal_get_path_alias('node/' . $docId);
  }
  else {
    return $url . drupal_get_path_alias('node/' . $nid);
  }
  */

  if ($docType == 'response') {                                 // added this so that responses hyperlink to the response url rather than the document url
    return $url . drupal_get_path_alias('node/' . $nid);
  } else if (!empty($docId)){                                   // original code:
    return $url . drupal_get_path_alias('node/' . $docId);
  }
  else {
    return $url . drupal_get_path_alias('node/' . $nid);
  }
}

function get_image($item, $docId) {
  if ($item->type == "biblio") {
    if ($docId != null) {
      $node = node_load($docId);
      // var_dump($node->field_image);
      return '<center>'.theme('image_style', array('style_name' => 'thumbnails_for_browsing', 'path' => $node->field_image[LANGUAGE_NONE][0]['uri'])).'</center>';
    }
  }
  else if ($item->type == "response") {
    return '<center>'.theme('image_style', array('style_name' => 'thumbnails_for_browsing', 'path' => $item->field_image[LANGUAGE_NONE][0]['uri'])).'</center>';
  }
  return "";
}

// Implements hook_library()
// To load our vis-specific libraries
function lacuna_visualizations_library() {
  return array(
    'crossfilter' => array(
      'title' => 'Crossfilter',
      'website' => 'http://square.github.io/crossfilter/',
      'version' => '1.3.10',
      'js' => array(
        drupal_get_path('module', 'lacuna_visualizations') . '/libraries/crossfilter/crossfilter.min.js' => array(),
      )
    )
  );
}

/**
 * Implements hook_cron().
 */
function lacuna_visualizations_cron() {
  // Rebuild the Annotations Dashboard cached data for every course
  if (variable_get('lacuna_visualizations_cron', TRUE)) {
    module_load_include('inc', 'lacuna_visualizations', 'lacuna_visualizations.dashboard');
    // Load every course
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'course')
      ->propertyCondition('status', NODE_PUBLISHED);
    $result = $query->execute();

    if (isset($result['node'])) {
      foreach (array_keys($result['node']) as $nid) {
        $data = lacuna_visualizations_annotation_dashboard_build_data($nid);
        lacuna_visualizations_annotation_dashboard_cache_set($nid, $data);
      }
    }
    watchdog('lacuna_visualizations', 'Rebuilt all dashboard data', array(), WATCHDOG_NOTICE);
  }
}

